import Head from 'next/head'
import { Anchor, AutoComplete, Container, Flex, TextField, Textarea, useTheme } from 'roku-ui'
import { useEffect, useState } from 'react'
import useSWRMutation, { type SWRMutationResponse } from 'swr/mutation'
import { useDebounce } from 'usehooks-ts'
import { franc } from 'franc'
import lang from 'langs'
export interface ReqBody {
  messages: Message[]
  model?: string
  temperature?: number
}

export interface Message {
  role: 'system' | 'user' | 'assistant'
  content: string
}
interface Options {
  messages: Message[]
  temperature: number
}

export interface ChatResp {
  id: string
  object: string
  created: number
  model: string
  usage: Usage
  choices: Choice[]
}

export interface Usage {
  prompt_tokens: number
  completion_tokens: number
  total_tokens: number
}

export interface Choice {
  message: Message
  finish_reason: string
  index: number
}

export function useChat (): SWRMutationResponse<ChatResp, Error, Options> {
  const res = useSWRMutation('/api/translate', async (url, { arg }: { arg: Options }) => {
    const resp = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(arg),
    })
    if (!resp.ok) {
      // eslint-disable-next-line no-console
      console.error(resp.statusText)
    }
    return await resp.json()
  })
  return res
}

export default function Home () {
  const [source, setSource] = useState('')
  const [target, setTarget] = useState('')
  const iso = franc(source, {
    minLength: 3,
  })
  const languageData = lang.where('3', iso)
  const languageName = languageData?.name ?? 'Unknown'
  const languages = lang.names()
  const { trigger, isMutating } = useChat()
  const sourceDebounced = useDebounce(source, 1000)
  const [targetLanguage, setTargetLanguage] = useState(typeof localStorage !== 'undefined' ? (localStorage.getItem('trgpt.last.tgt') ?? 'English') : 'English')
  const targetLanguageDebounced = useDebounce(targetLanguage, 1000)
  const { theme } = useTheme()
  let dark = theme === 'dark'
  if (theme === 'system' && typeof window !== 'undefined') {
    // return preferred color scheme
    dark = window.matchMedia('(prefers-color-scheme: dark)').matches
  }
  useEffect(() => {
    if (sourceDebounced === '') return
    void trigger({
      messages: [
        {
          role: 'system',
          content: `从现在开始，你扮演一个翻译 API。你应该把我的下一次输入的文本翻译成 ${targetLanguageDebounced}。你的回答必须只包括翻译。请不要回复与翻译无关的道歉、解释、对问题的回应等。`,
        },
        {
          role: 'user',
          content: `${sourceDebounced}`,
        },
      ],
      temperature: 0.6,
    })?.then((res) => {
      const resText = res?.choices[0].message.content ?? ''
      try {
        setTarget(resText)
      } catch (e) {
        // eslint-disable-next-line no-console
        console.error(e, resText)
      }
    })
  }, [sourceDebounced, targetLanguageDebounced, trigger])
  return (
    <>
      <Head>
        <title>Translator GPT - Tr.GPT</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Container style={{ paddingTop: '5rem' }}>
        <Flex direction="column" gap="1rem">
          <div style={{ textAlign: 'center' }}>
            <h1 style={{
              fontSize: '2rem',
              fontWeight: 'bold',
            }}>
              Tr.GPT
            </h1>
            <p style={{
              fontSize: '0.8rem',
              fontWeight: 'normal',
              color: 'hsl(var(--r-frontground-3))',
            }}>
              Translate your text with GPT-3.5, powered by OpenAI
            </p>
          </div>
          <Flex gap="1rem" justify="between">
            <Flex direction="column" gap="1rem" style={{ flexGrow: 1, flexBasis: 0 }}>
              <h2>From</h2>
              <TextField disabled style={{ width: '100%' }} value={`Auto(${languageName})`} />
              <Textarea className="textarea" value={source} setValue={setSource} />
            </Flex>
            <Flex direction="column" gap="1rem" style={{ flexGrow: 1, flexBasis: 0 }}>
              <h2>To</h2>
              { /* <TextField value={targetLanguage} setValue={setTargetLanguage} /> */ }
              <AutoComplete color="primary"
                style={{ width: '100%' }}
                defaultValue={targetLanguage}
                getFilter={(query) => (d) => d.toLowerCase().includes(query.toLowerCase())}
                getKey={d => d}
                setValue={(val) => {
                  setTargetLanguage(val)
                  localStorage.setItem('trgpt.last.tgt', val)
                }} options={languages} />
              <div style={{ position: 'relative' }} className={isMutating ? `res-wrapper loading-wrapper-${dark ? 'dark' : 'light'}` : 'res-wrapper'}>
                <Textarea className="textarea" value={target} setValue={setTarget} />
              </div>
            </Flex>
          </Flex>
        </Flex>
        <h2 style={{ color: 'hsl(var(--r-frontground-3))', fontSize: '0.8rem', paddingTop: '1rem' }}>{ 'Made by Jannchie<jannchie@gmail.com>' } @ { new Date().getFullYear() } / <Anchor href="https://github.com/Jannchie/Tr.GPT" > Repo </Anchor></h2>
      </Container>
    </>
  )
}
